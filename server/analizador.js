/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,15],$V2=[1,16],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,18],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,19],$Vd=[5,18,25,26,40,41,46,62,68,69,70,71,72,102],$Ve=[1,32],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[2,76],$Vl=[18,59,64],$Vm=[1,47],$Vn=[1,46],$Vo=[1,62],$Vp=[1,54],$Vq=[1,53],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,89],$VH=[1,106],$VI=[1,112],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[5,18,19,23,25,26,36,37,39,40,41,46,49,51,56,62,68,69,70,71,72,74,85,86,87,88,89,90,91,102,103,104,105,107,108,109,110,111],$VO=[1,132],$VP=[1,141],$VQ=[1,143],$VR=[1,133],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,142],$V_=[1,144],$V$=[1,145],$V01=[1,146],$V11=[20,27,29,55,58,60,63,64,73,74,75,76,77,78,79,80,81,82,83,84],$V21=[1,156],$V31=[1,172],$V41=[18,23,36,37,39,40,41,46,49,51,56,62,68,69,70,71,72,102],$V51=[1,184],$V61=[20,29],$V71=[1,193],$V81=[20,29,60],$V91=[20,27,29,55,58,60,83,84],$Va1=[20,27,29,55,58,60,63,64,73,74,79,80,81,82,83,84],$Vb1=[20,27,29,55,58,60,63,64,73,74,75,76,78,79,80,81,82,83,84],$Vc1=[20,27,29,55,58,60,63,64,79,80,81,82,83,84],$Vd1=[5,18,23,25,26,36,37,39,40,41,46,49,51,56,62,68,69,70,71,72,102],$Ve1=[1,307];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"ENTCERO":6,"FUNCIONBODY":7,"METODOBODY":8,"EXECBODY":9,"DEC_VAR":10,"DEC_VECT":11,"DEC_LIST":12,"FPRINT":13,"WHILE":14,"FOR":15,"DOWHILE":16,"TIPO":17,"id":18,"pabre":19,"pcierra":20,"labre":21,"INSTRUCCION":22,"lcierra":23,"LISTAPARAMETROS":24,"prvoid":25,"prexec":26,"ptcoma":27,"LISTAVALORES":28,"coma":29,"PARAMETROS":30,"INSCERO":31,"SENTENCIACONTROL":32,"SENTENCIACICLO":33,"SENTENCIATRANSFERENCIA":34,"LLAMADA":35,"prbreak":36,"prreturn":37,"EXPRESION":38,"prcontinue":39,"prwhile":40,"prfor":41,"ACTUALIZACION":42,"igual":43,"incremento":44,"decremento":45,"prdo":46,"IF":47,"SWITCH":48,"prif":49,"prelse":50,"prswitch":51,"CASESLIST":52,"DEFAULT":53,"prcase":54,"dospuntos":55,"prdefault":56,"TERNARIO":57,"interrogacion":58,"cabre":59,"ccierra":60,"prnew":61,"prlist":62,"menor":63,"mayor":64,"punto":65,"pradd":66,"TIPODATO":67,"prstring":68,"printeger":69,"prdouble":70,"prchar":71,"prboolean":72,"suma":73,"menos":74,"multi":75,"div":76,"exponente":77,"modulo":78,"igualigual":79,"diferente":80,"menorigual":81,"mayorigual":82,"or":83,"and":84,"not":85,"cadena":86,"caracter":87,"true":88,"false":89,"entero":90,"doble":91,"CASTEO":92,"FUNCIONESRESERVADAS":93,"FTOLOWER":94,"FTOUPPER":95,"FLENGTH":96,"FTRUNCATE":97,"FROUND":98,"FTYPEOF":99,"FTOSTRING":100,"FTOCHARARRAY":101,"prprint":102,"prtoLower":103,"prtoUpper":104,"prlength":105,"VALORLEN":106,"prtruncate":107,"prround":108,"prtypeof":109,"prtoString":110,"prtoCharArray":111,"TIPOCAST":112,"print":113,"EXPCAST":114,"VALORES":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"id",19:"pabre",20:"pcierra",21:"labre",23:"lcierra",25:"prvoid",26:"prexec",27:"ptcoma",29:"coma",36:"prbreak",37:"prreturn",39:"prcontinue",40:"prwhile",41:"prfor",43:"igual",44:"incremento",45:"decremento",46:"prdo",49:"prif",50:"prelse",51:"prswitch",54:"prcase",55:"dospuntos",56:"prdefault",58:"interrogacion",59:"cabre",60:"ccierra",61:"prnew",62:"prlist",63:"menor",64:"mayor",65:"punto",66:"pradd",68:"prstring",69:"printeger",70:"prdouble",71:"prchar",72:"prboolean",73:"suma",74:"menos",75:"multi",76:"div",77:"exponente",78:"modulo",79:"igualigual",80:"diferente",81:"menorigual",82:"mayorigual",83:"or",84:"and",85:"not",86:"cadena",87:"caracter",88:"true",89:"false",90:"entero",91:"doble",102:"prprint",103:"prtoLower",104:"prtoUpper",105:"prlength",107:"prtruncate",108:"prround",109:"prtypeof",110:"prtoString",111:"prtoCharArray",113:"print"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,8],[8,7],[8,8],[9,5],[9,6],[24,3],[24,1],[30,2],[22,2],[22,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,1],[34,2],[34,3],[34,2],[34,2],[33,1],[33,1],[33,1],[14,7],[15,10],[42,3],[42,2],[42,2],[16,9],[32,1],[32,1],[47,9],[47,11],[47,7],[48,8],[48,7],[48,7],[52,4],[53,3],[10,5],[10,4],[10,5],[10,3],[10,4],[10,3],[10,3],[57,5],[11,11],[11,9],[11,7],[12,12],[12,7],[12,9],[17,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,6],[38,4],[38,1],[38,1],[38,1],[38,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[13,5],[94,4],[95,4],[96,4],[106,6],[106,4],[106,1],[97,4],[98,4],[99,4],[100,4],[101,4],[92,5],[112,1],[112,1],[112,1],[112,1],[114,1],[114,1],[114,1],[114,1],[35,4],[35,3],[28,3],[28,1],[115,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 23:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 24:
this.$=[$$[$0]];
break;
case 7: case 10: case 11: case 12: case 13: case 25: case 27: case 32: case 37: case 38: case 39: case 105: case 106:
this.$=$$[$0]
break;
case 40:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 41:
$$[$0-1].push($$[$0-4]); this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 42:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 43:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 44:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 45:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 61:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'SUMA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 62:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
  			opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
  			tipo: 'RESTA',
  			linea: this._$.first_line,
  			columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 70:
this.$ = $$[$0]
break;
case 71:
this.$ = TIPO_DATO.CADENA
break;
case 72:
this.$ = TIPO_DATO.ENTERO
break;
case 73:
this.$ = TIPO_DATO.DOBLE
break;
case 74:
this.$ = TIPO_DATO.CARACTER
break;
case 75:
this.$ = TIPO_DATO.BOOLEANO
break;
case 76:
this.$ = TIPO_DATO.LISTA
break;
case 77:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 78:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 79:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 80:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 81:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 82:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 83:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 84:
this.$=$$[$0-1]
break;
case 85:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 86:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 87:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 88:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 89:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 90:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 91:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 92:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 93:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 94:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 96: case 97:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEANO, this._$.first_line,this._$.first_column+1)
break;
case 98:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 99:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$=$$[$0-5];
break;
case 101:
this.$=$$[$0-3];
break;
case 102:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 115:
this.$ = new INSTRUCCION.nuevoImprimir($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 132: case 133: case 134: case 135:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,25:$V1,26:$V2,40:$V3,41:$V4,46:$V5,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,25:$V1,26:$V2,40:$V3,41:$V4,46:$V5,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),{18:[1,31],59:$Ve},{18:[1,33]},{18:[1,34]},{43:$Vf,44:$Vg,45:$Vh,59:$Vi,65:$Vj},o([18,59],$Vk,{63:[1,40]}),{19:[1,41]},{19:[1,42]},{19:[1,43]},{21:[1,44]},o($Vl,[2,70]),o($Vl,[2,71]),o($Vl,[2,72]),o($Vl,[2,73]),o($Vl,[2,74]),o($Vl,[2,75]),{1:[2,1]},o($Vd,[2,2]),{19:[1,45],27:$Vm,43:$Vn},{60:[1,48]},{19:[1,49]},{19:[1,50]},{13:66,18:$Vo,19:$Vp,35:64,38:52,57:51,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{27:[1,83]},{27:[1,84]},{13:66,18:$Vo,19:$Vp,35:64,38:85,59:[1,86],74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{66:[1,87]},{17:88,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{13:66,18:$Vo,19:$Vp,35:64,38:90,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:91,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{10:92,17:93,18:[1,94],62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:95,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{17:120,20:[1,117],24:118,30:119,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{13:66,18:$Vo,19:$Vp,35:64,38:122,57:121,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},o($VN,[2,59]),{18:[1,123]},{17:120,20:[1,124],24:125,30:119,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{13:66,18:$Vo,19:$Vp,20:[1,126],28:127,35:64,38:129,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,115:128},{27:[1,130]},{27:[1,131],58:$VO,63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{13:66,18:$Vo,19:$Vp,35:64,38:147,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:148,68:[1,153],70:[1,151],71:[1,152],74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,112:149,113:[1,150]},{13:66,18:$Vo,19:$Vp,35:64,38:154,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},o($V11,[2,94]),o($V11,[2,95]),o($V11,[2,96]),o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,102],{19:$V21,59:[1,155]}),o($V11,[2,103]),o($V11,[2,104]),o($V11,[2,105]),o($V11,[2,106]),o($V11,[2,107]),o($V11,[2,108]),o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($V11,[2,113]),o($V11,[2,114]),{19:[1,157]},{19:[1,158]},{19:[1,159]},{19:[1,160]},{19:[1,161]},{19:[1,162]},{19:[1,163]},{19:[1,164]},o($VN,[2,61]),o($VN,[2,62]),{60:[1,165],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{13:66,18:$Vo,19:$Vp,35:64,38:166,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{19:[1,167]},{64:[1,168]},o($Vl,$Vk),{20:[1,169],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,170],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{13:66,18:$Vo,19:$Vp,35:64,38:171,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{18:$V31},{43:$Vf,44:$Vg,45:$Vh},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,173],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($V41,[2,24]),o($V41,[2,25]),o($V41,[2,26]),o($V41,[2,27]),o($V41,[2,28]),o($V41,[2,29]),o($V41,[2,30]),{27:[1,175]},o($V41,[2,32]),{18:$V31,59:$Ve},{19:$V21,43:$Vf,44:$Vg,45:$Vh,59:$Vi,65:$Vj},o($V41,[2,46]),o($V41,[2,47]),o($V41,[2,37]),o($V41,[2,38]),o($V41,[2,39]),{27:[1,176]},{13:66,18:$Vo,19:$Vp,27:[1,178],35:64,38:177,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{27:[1,179]},{19:[1,180]},{19:[1,181]},{21:[1,182]},{20:[1,183],29:$V51},o($V61,[2,21]),{18:[1,185]},{27:[1,186]},{27:[1,187],58:$VO,63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{43:[1,188]},{21:[1,189]},{20:[1,190],29:$V51},{27:[1,191]},{20:[1,192],29:$V71},o($V81,[2,139]),o($V81,[2,140],{63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01}),o($VN,[2,57]),o($VN,[2,60]),{13:66,18:$Vo,19:$Vp,35:64,38:194,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:195,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:196,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:197,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:198,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:199,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:200,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:201,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:202,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:203,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:204,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:205,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:206,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:207,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:208,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},o($V11,[2,83]),{20:[1,209],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,210]},{20:[2,128]},{20:[2,129]},{20:[2,130]},{20:[2,131]},o($V91,[2,93],{63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_}),{13:66,18:$Vo,19:$Vp,35:64,38:212,59:[1,211],74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,20:[1,214],28:213,35:64,38:129,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,115:128},{13:66,18:$Vo,19:$Vp,35:64,38:215,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:216,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{18:[1,218],106:217},{13:66,18:$Vo,19:$Vp,35:64,38:219,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:220,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:221,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:222,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:223,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{43:[1,224]},{60:[1,225],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{13:66,18:$Vo,19:$Vp,35:64,38:226,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{18:[1,227]},{27:[1,228]},{21:[1,229]},{27:[1,230],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{27:$Vm,43:$Vn},{40:[1,231]},o($V41,[2,23]),o($V41,[2,31]),o($V41,[2,33]),{27:[1,232],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($V41,[2,36]),o($V41,[2,35]),{13:66,18:$Vo,19:$Vp,35:64,38:233,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:234,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:235,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{21:[1,236]},{17:120,30:237,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},o($V61,[2,22]),o($VN,[2,56]),o($VN,[2,58]),{59:[1,239],61:[1,238]},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:240,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{21:[1,241]},o($Vd,[2,18]),{27:[1,242]},{13:66,18:$Vo,19:$Vp,35:64,38:129,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,115:243},{55:[1,244],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($Va1,[2,77],{75:$VT,76:$VU,77:$VV,78:$VW}),o($Va1,[2,78],{75:$VT,76:$VU,77:$VV,78:$VW}),o($Vb1,[2,79],{77:$VV}),o($Vb1,[2,80],{77:$VV}),o($V11,[2,81]),o($Vb1,[2,82],{77:$VV}),o($Vc1,[2,85],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o($Vc1,[2,86],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o($Vc1,[2,87],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o($Vc1,[2,88],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o($Vc1,[2,89],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o($Vc1,[2,90],{73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW}),o([20,27,29,55,58,60,83],[2,91],{63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,84:$V01}),o($V91,[2,92],{63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_}),o($V11,[2,84]),{13:66,18:$Vo,19:$Vp,35:64,38:245,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{13:66,18:$Vo,19:$Vp,35:64,38:246,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{60:[1,247],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,248],29:$V71},o($V11,[2,137]),{20:[1,249],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,250],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,251]},{20:[2,121],59:[1,252]},{20:[1,253],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,254],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,255],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,256],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,257],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{13:66,18:$Vo,19:$Vp,35:64,38:258,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{60:[1,259]},{20:[1,260],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{43:[1,261]},o([5,18,20,23,25,26,27,29,36,37,39,40,41,46,49,51,55,56,58,60,62,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,102],[2,115]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:262,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{18:[1,264],42:263},{19:[1,265]},o($V41,[2,34]),{20:[1,266],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[1,267],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,268],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:269,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($V61,[2,20]),{17:270,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{13:66,18:$Vo,19:$Vp,28:271,35:64,38:129,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF,115:128},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,272],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:273,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($Vd,[2,19]),o($V81,[2,138]),{13:66,18:$Vo,19:$Vp,35:64,38:274,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{27:[1,275],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{60:[1,276],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($V11,[2,101]),o($V11,[2,136]),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),{13:66,18:$Vo,19:$Vp,35:64,38:278,59:[1,277],74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},o($V11,[2,122]),o($V11,[2,123]),o($V11,[2,124]),o($V11,[2,125]),o($V11,[2,126]),{27:[1,279],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{43:[1,280]},{27:[1,281]},{61:[1,282]},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,283],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{20:[1,284]},{43:[1,285],44:[1,286],45:[1,287]},{13:66,18:$Vo,19:$Vp,35:64,38:288,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{21:[1,289]},{21:[1,290]},o($Vd,[2,14]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,291],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{59:[1,292]},{29:$V71,60:[1,293]},o($Vd,[2,16]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,294],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{27:[2,63],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($V11,[2,127]),{60:[1,295]},{13:66,18:$Vo,19:$Vp,35:64,38:296,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{60:[1,297],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($Vd1,[2,66]),{13:66,18:$Vo,19:$Vp,35:64,38:298,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},o($Vd1,[2,68]),{62:[1,299]},o($Vd1,[2,40]),{21:[1,300]},{13:66,18:$Vo,19:$Vp,35:64,38:301,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{20:[2,43]},{20:[2,44]},{20:[1,302],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:303,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{52:304,53:305,54:[1,306],56:$Ve1},o($Vd,[2,15]),{13:66,18:$Vo,19:$Vp,35:64,38:308,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{27:[1,309]},o($Vd,[2,17]),o($V11,[2,100]),{60:[1,310],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{20:[2,120]},{27:[1,311],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{63:[1,312]},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:313,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{20:[2,42],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{27:[1,314]},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,315],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{23:[1,317],53:316,56:$Ve1},{23:[1,318]},{13:66,18:$Vo,19:$Vp,35:64,38:319,74:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:63,93:65,94:67,95:68,96:69,97:70,98:71,99:72,100:73,101:74,102:$Vc,103:$Vy,104:$Vz,105:$VA,107:$VB,108:$VC,109:$VD,110:$VE,111:$VF},{55:[1,320]},{60:[1,321],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},o($Vd1,[2,65]),{60:[1,322]},o($Vd1,[2,69]),{17:323,62:$VG,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,324],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($Vd1,[2,45]),o($V41,[2,50],{50:[1,325]}),{23:[1,326]},o($V41,[2,52]),o($V41,[2,53]),{55:[1,327],63:$VP,64:$VQ,73:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:328,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{27:[1,329]},{20:[2,119]},{64:[1,330]},o($Vd1,[2,41]),{21:[1,332],47:331,49:$VL},o($V41,[2,51]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:333,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[2,55],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($Vd1,[2,64]),{27:[1,334]},o($V41,[2,48]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,22:335,31:96,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o([23,56],[2,54],{67:23,10:97,32:98,33:99,11:100,12:101,34:102,35:103,13:104,17:105,47:107,48:108,14:109,15:110,16:111,31:174,18:$VH,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,49:$VL,51:$VM,62:$V6,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc}),o($Vd1,[2,67]),{10:97,11:100,12:101,13:104,14:109,15:110,16:111,17:105,18:$VH,23:[1,336],31:174,32:98,33:99,34:102,35:103,36:$VI,37:$VJ,39:$VK,40:$V3,41:$V4,46:$V5,47:107,48:108,49:$VL,51:$VM,62:$V6,67:23,68:$V7,69:$V8,70:$V9,71:$Va,72:$Vb,102:$Vc},o($V41,[2,49])],
defaultActions: {29:[2,1],150:[2,128],151:[2,129],152:[2,130],153:[2,131],286:[2,43],287:[2,44],297:[2,120],322:[2,119]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enum/TipoOperaciones');
	const TIPO_VALOR 		= require('./controller/Enum/TipoValores');
	const TIPO_DATO			= require('./controller/Enum/Tipados');
	const INSTRUCCION		= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// EndOfLineComment
break;
case 2:// MultiLineComment
break;
case 3:return 'prclase'
break;
case 4:return 70
break;
case 5:return 69
break;
case 6:return 72
break;
case 7:return 71
break;
case 8:return 68
break;
case 9:return 62
break;
case 10:return 61
break;
case 11:return 66
break;
case 12:return 49
break;
case 13:return 50
break;
case 14:return 51
break;
case 15:return 54
break;
case 16:return 36
break;
case 17:return 40
break;
case 18:return 41
break;
case 19:return 46
break;
case 20:return 56
break;
case 21:return 39
break;
case 22:return 37
break;
case 23:return 25
break;
case 24:return 44
break;
case 25:return 45
break;
case 26:return 102
break;
case 27:return 103
break;
case 28:return 104
break;
case 29:return 105
break;
case 30:return 107
break;
case 31:return 108
break;
case 32:return 109
break;
case 33:return 110
break;
case 34:return 111
break;
case 35:return 26
break;
case 36:return 88
break;
case 37:return 89
break;
case 38:return 83
break;
case 39:return 84
break;
case 40:return 80
break;
case 41:return 79
break;
case 42:return 85
break;
case 43:return 43
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 64
break;
case 47:return 63
break;
case 48:return 29
break;
case 49:return 27
break;
case 50:return 65
break;
case 51:return 55
break;
case 52:return 21
break;
case 53:return 23
break;
case 54:return 75
break;
case 55:return 76
break;
case 56:return 74
break;
case 57:return 73
break;
case 58:return 77
break;
case 59:return 78
break;
case 60:return 19
break;
case 61:return 20
break;
case 62:return 58
break;
case 63:return 59
break;
case 64:return 60
break;
case 65:return 'especiales'
break;
case 66:return 18
break;
case 67:return 87 //probarlo
break;
case 68:return 86
break;
case 69:return 91
break;
case 70:return 90
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\\\/\\\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:clase\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\\n|\\\\|\\"|\\“|\\”|\\t|\\')/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:['].?[']|[']especiales['])/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}