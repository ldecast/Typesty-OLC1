/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,12],$V2=[1,13],$V3=[1,15],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,16],$Va=[5,15,22,23,62,68,69,70,71,72,102],$Vb=[1,26],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[2,71],$Vg=[15,59,64],$Vh=[1,36],$Vi=[1,35],$Vj=[1,51],$Vk=[1,43],$Vl=[1,42],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,76],$VC=[5,15,16,20,22,23,33,34,36,40,41,46,49,51,56,62,68,69,70,71,72,74,85,86,87,88,89,90,91,102,103,104,105,107,108,109,110,111],$VD=[1,93],$VE=[1,102],$VF=[1,104],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,103],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[17,24,26,55,58,60,63,64,73,74,75,76,77,78,79,80,81,82,83,84],$VT=[1,117],$VU=[1,133],$VV=[17,26],$VW=[1,142],$VX=[17,26,60],$VY=[17,24,26,55,58,60,83,84],$VZ=[1,189],$V_=[1,195],$V$=[1,196],$V01=[1,197],$V11=[1,200],$V21=[1,201],$V31=[1,202],$V41=[1,198],$V51=[1,199],$V61=[17,24,26,55,58,60,63,64,73,74,79,80,81,82,83,84],$V71=[17,24,26,55,58,60,63,64,73,74,75,76,78,79,80,81,82,83,84],$V81=[17,24,26,55,58,60,63,64,79,80,81,82,83,84],$V91=[15,20,33,34,36,40,41,46,49,51,56,62,68,69,70,71,72,102],$Va1=[1,232],$Vb1=[5,15,20,22,23,33,34,36,40,41,46,49,51,56,62,68,69,70,71,72,102],$Vc1=[1,295];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"ENTCERO":6,"FUNCIONBODY":7,"METODOBODY":8,"EXECBODY":9,"DEC_VAR":10,"DEC_VECT":11,"DEC_LIST":12,"FPRINT":13,"TIPO":14,"id":15,"pabre":16,"pcierra":17,"labre":18,"INSTRUCCION":19,"lcierra":20,"LISTAPARAMETROS":21,"prvoid":22,"prexec":23,"ptcoma":24,"LISTAVALORES":25,"coma":26,"PARAMETROS":27,"INSCERO":28,"SENTENCIACONTROL":29,"SENTENCIACICLO":30,"SENTENCIATRANSFERENCIA":31,"LLAMADA":32,"prbreak":33,"prreturn":34,"EXPRESION":35,"prcontinue":36,"WHILE":37,"FOR":38,"DOWHILE":39,"prwhile":40,"prfor":41,"ACTUALIZACION":42,"igual":43,"incremento":44,"decremento":45,"prdo":46,"IF":47,"SWITCH":48,"prif":49,"prelse":50,"prswitch":51,"CASESLIST":52,"DEFAULT":53,"prcase":54,"dospuntos":55,"prdefault":56,"TERNARIO":57,"interrogacion":58,"cabre":59,"ccierra":60,"prnew":61,"prlist":62,"menor":63,"mayor":64,"punto":65,"pradd":66,"TIPODATO":67,"prstring":68,"printeger":69,"prdouble":70,"prchar":71,"prboolean":72,"suma":73,"menos":74,"multi":75,"div":76,"exponente":77,"modulo":78,"igualigual":79,"diferente":80,"menorigual":81,"mayorigual":82,"or":83,"and":84,"not":85,"cadena":86,"caracter":87,"true":88,"false":89,"entero":90,"doble":91,"CASTEO":92,"FUNCIONESRESERVADAS":93,"FTOLOWER":94,"FTOUPPER":95,"FLENGTH":96,"FTRUNCATE":97,"FROUND":98,"FTYPEOF":99,"FTOSTRING":100,"FTOCHARARRAY":101,"prprint":102,"prtoLower":103,"prtoUpper":104,"prlength":105,"VALORLEN":106,"prtruncate":107,"prround":108,"prtypeof":109,"prtoString":110,"prtoCharArray":111,"TIPOCAST":112,"print":113,"EXPCAST":114,"VALORES":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"id",16:"pabre",17:"pcierra",18:"labre",20:"lcierra",22:"prvoid",23:"prexec",24:"ptcoma",26:"coma",33:"prbreak",34:"prreturn",36:"prcontinue",40:"prwhile",41:"prfor",43:"igual",44:"incremento",45:"decremento",46:"prdo",49:"prif",50:"prelse",51:"prswitch",54:"prcase",55:"dospuntos",56:"prdefault",58:"interrogacion",59:"cabre",60:"ccierra",61:"prnew",62:"prlist",63:"menor",64:"mayor",65:"punto",66:"pradd",68:"prstring",69:"printeger",70:"prdouble",71:"prchar",72:"prboolean",73:"suma",74:"menos",75:"multi",76:"div",77:"exponente",78:"modulo",79:"igualigual",80:"diferente",81:"menorigual",82:"mayorigual",83:"or",84:"and",85:"not",86:"cadena",87:"caracter",88:"true",89:"false",90:"entero",91:"doble",102:"prprint",103:"prtoLower",104:"prtoUpper",105:"prlength",107:"prtruncate",108:"prround",109:"prtypeof",110:"prtoString",111:"prtoCharArray",113:"print"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,8],[8,7],[8,8],[9,5],[9,6],[21,3],[21,1],[27,2],[19,2],[19,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,2],[28,1],[31,2],[31,3],[31,2],[31,2],[30,1],[30,1],[30,1],[37,7],[38,10],[42,3],[42,2],[42,2],[39,9],[29,1],[29,1],[47,9],[47,11],[47,7],[48,8],[48,7],[48,7],[52,4],[53,3],[10,5],[10,4],[10,5],[10,3],[10,4],[57,5],[11,11],[11,9],[11,7],[12,12],[12,7],[12,9],[14,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,6],[35,4],[35,1],[35,1],[35,1],[35,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[13,5],[94,4],[95,4],[96,4],[106,6],[106,4],[106,1],[97,4],[98,4],[99,4],[100,4],[101,4],[92,5],[112,1],[112,1],[112,1],[112,1],[114,1],[114,1],[114,1],[114,1],[32,4],[32,3],[25,3],[25,1],[115,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 20:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 21:
this.$=[$$[$0]];
break;
case 7: case 10: case 22: case 29: case 100: case 101:
this.$=$$[$0]
break;
case 55:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 56:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = $$[$0]
break;
case 66:
this.$ = TIPO_DATO.CADENA
break;
case 67:
this.$ = TIPO_DATO.ENTERO
break;
case 68:
this.$ = TIPO_DATO.DOBLE
break;
case 69:
this.$ = TIPO_DATO.CARACTER
break;
case 70:
this.$ = TIPO_DATO.BOOLEANO
break;
case 71:
this.$ = TIPO_DATO.LISTA
break;
case 72:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 73:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 74:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 75:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 76:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 77:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 78:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 79:
this.$=$$[$0-1]
break;
case 89:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 90:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 91: case 92:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEANO, this._$.first_line,this._$.first_column+1)
break;
case 93:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 94:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$=$$[$0-5];
break;
case 96:
this.$=$$[$0-3];
break;
case 97:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 110:
this.$ = new INSTRUCCION.nuevoImprimir($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 127: case 128: case 129: case 130:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,22:$V1,23:$V2,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,22:$V1,23:$V2,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),{15:[1,25],59:$Vb},{15:[1,27]},{15:[1,28]},{43:$Vc,59:$Vd,65:$Ve},o([15,59],$Vf,{63:[1,32]}),{16:[1,33]},o($Vg,[2,65]),o($Vg,[2,66]),o($Vg,[2,67]),o($Vg,[2,68]),o($Vg,[2,69]),o($Vg,[2,70]),{1:[2,1]},o($Va,[2,2]),{16:[1,34],24:$Vh,43:$Vi},{60:[1,37]},{16:[1,38]},{16:[1,39]},{13:55,15:$Vj,16:$Vk,32:53,35:41,57:40,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:72,59:[1,73],74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{66:[1,74]},{14:75,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{13:55,15:$Vj,16:$Vk,32:53,35:77,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{14:81,17:[1,78],21:79,27:80,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{13:55,15:$Vj,16:$Vk,32:53,35:83,57:82,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($VC,[2,56]),{15:[1,84]},{14:81,17:[1,85],21:86,27:80,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{13:55,15:$Vj,16:$Vk,17:[1,87],25:88,32:53,35:90,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,115:89},{24:[1,91]},{24:[1,92],58:$VD,63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{13:55,15:$Vj,16:$Vk,32:53,35:108,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:109,68:[1,114],70:[1,112],71:[1,113],74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:110,113:[1,111]},{13:55,15:$Vj,16:$Vk,32:53,35:115,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($VS,[2,89]),o($VS,[2,90]),o($VS,[2,91]),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,97],{16:$VT,59:[1,116]}),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),{16:[1,118]},{16:[1,119]},{16:[1,120]},{16:[1,121]},{16:[1,122]},{16:[1,123]},{16:[1,124]},{16:[1,125]},{60:[1,126],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{13:55,15:$Vj,16:$Vk,32:53,35:127,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{16:[1,128]},{64:[1,129]},o($Vg,$Vf),{17:[1,130],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{18:[1,131]},{17:[1,132],26:$VU},o($VV,[2,18]),{15:[1,134]},{24:[1,135]},{24:[1,136],58:$VD,63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{43:[1,137]},{18:[1,138]},{17:[1,139],26:$VU},{24:[1,140]},{17:[1,141],26:$VW},o($VX,[2,134]),o($VX,[2,135],{63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($VC,[2,54]),o($VC,[2,57]),{13:55,15:$Vj,16:$Vk,32:53,35:143,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:144,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:145,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:146,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:147,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:148,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:149,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:150,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:151,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:152,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:153,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:154,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:155,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:156,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:157,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($VS,[2,78]),{17:[1,158],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,159]},{17:[2,123]},{17:[2,124]},{17:[2,125]},{17:[2,126]},o($VY,[2,88],{63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP}),{13:55,15:$Vj,16:$Vk,32:53,35:161,59:[1,160],74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,17:[1,163],25:162,32:53,35:90,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,115:89},{13:55,15:$Vj,16:$Vk,32:53,35:164,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:165,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{15:[1,167],106:166},{13:55,15:$Vj,16:$Vk,32:53,35:168,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:169,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:170,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:171,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:172,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{43:[1,173]},{60:[1,174],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{13:55,15:$Vj,16:$Vk,32:53,35:175,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{15:[1,176]},{24:[1,177]},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:178,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{18:[1,203]},{14:81,27:204,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},o($VV,[2,19]),o($VC,[2,53]),o($VC,[2,55]),{59:[1,206],61:[1,205]},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:207,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{18:[1,208]},o($Va,[2,15]),{24:[1,209]},{13:55,15:$Vj,16:$Vk,32:53,35:90,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,115:210},{55:[1,211],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($V61,[2,72],{75:$VI,76:$VJ,77:$VK,78:$VL}),o($V61,[2,73],{75:$VI,76:$VJ,77:$VK,78:$VL}),o($V71,[2,74],{77:$VK}),o($V71,[2,75],{77:$VK}),o($VS,[2,76]),o($V71,[2,77],{77:$VK}),o($V81,[2,80],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V81,[2,81],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V81,[2,82],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V81,[2,83],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V81,[2,84],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V81,[2,85],{73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o([17,24,26,55,58,60,83],[2,86],{63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,84:$VR}),o($VY,[2,87],{63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP}),o($VS,[2,79]),{13:55,15:$Vj,16:$Vk,32:53,35:212,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:213,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{60:[1,214],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,215],26:$VW},o($VS,[2,132]),{17:[1,216],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,217],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,218]},{17:[2,116],59:[1,219]},{17:[1,220],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,221],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,222],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,223],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,224],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{13:55,15:$Vj,16:$Vk,32:53,35:225,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{60:[1,226]},{17:[1,227],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{43:[1,228]},o([5,15,17,20,22,23,24,26,33,34,36,40,41,46,49,51,55,56,58,60,62,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,102],[2,110]),{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,229],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($V91,[2,21]),o($V91,[2,22]),o($V91,[2,23]),o($V91,[2,24]),o($V91,[2,25]),o($V91,[2,26]),o($V91,[2,27]),{24:[1,231]},o($V91,[2,29]),{15:$Va1,59:$Vb},{16:$VT,43:$Vc,59:$Vd,65:$Ve},o($V91,[2,43]),o($V91,[2,44]),o($V91,[2,34]),o($V91,[2,35]),o($V91,[2,36]),{24:[1,233]},{13:55,15:$Vj,16:$Vk,24:[1,235],32:53,35:234,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{24:[1,236]},{16:[1,237]},{16:[1,238]},{16:[1,239]},{16:[1,240]},{18:[1,241]},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:242,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($VV,[2,17]),{14:243,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{13:55,15:$Vj,16:$Vk,25:244,32:53,35:90,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,115:89},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,245],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:246,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($Va,[2,16]),o($VX,[2,133]),{13:55,15:$Vj,16:$Vk,32:53,35:247,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{24:[1,248],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{60:[1,249],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($VS,[2,96]),o($VS,[2,131]),o($VS,[2,111]),o($VS,[2,112]),o($VS,[2,113]),{13:55,15:$Vj,16:$Vk,32:53,35:251,59:[1,250],74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($VS,[2,117]),o($VS,[2,118]),o($VS,[2,119]),o($VS,[2,120]),o($VS,[2,121]),{24:[1,252],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{43:[1,253]},{24:[1,254]},{61:[1,255]},o($Va,[2,11]),o($V91,[2,20]),o($V91,[2,28]),{24:$Vh,43:$Vi},o($V91,[2,30]),{24:[1,256],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($V91,[2,33]),o($V91,[2,32]),{13:55,15:$Vj,16:$Vk,32:53,35:257,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:258,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{13:55,15:$Vj,16:$Vk,32:53,35:259,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{10:260,14:261,15:[1,262],62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:263,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,264],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{59:[1,265]},{26:$VW,60:[1,266]},o($Va,[2,13]),{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,267],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{24:[2,58],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($VS,[2,122]),{60:[1,268]},{13:55,15:$Vj,16:$Vk,32:53,35:269,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{60:[1,270],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($Vb1,[2,61]),{13:55,15:$Vj,16:$Vk,32:53,35:271,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($Vb1,[2,63]),{62:[1,272]},o($V91,[2,31]),{17:[1,273],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,274],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[1,275],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{13:55,15:$Vj,16:$Vk,32:53,35:276,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{15:$Va1},{43:$Vc},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,277],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($Va,[2,12]),{13:55,15:$Vj,16:$Vk,32:53,35:278,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{24:[1,279]},o($Va,[2,14]),o($VS,[2,95]),{60:[1,280],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{17:[2,115]},{24:[1,281],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{63:[1,282]},{18:[1,283]},{18:[1,284]},{18:[1,285]},{24:[1,286],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{40:[1,287]},{60:[1,288],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($Vb1,[2,60]),{60:[1,289]},o($Vb1,[2,64]),{14:290,62:$VB,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:291,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{52:292,53:293,54:[1,294],56:$Vc1},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:296,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{15:[1,298],42:297},{16:[1,299]},{24:[1,300]},{17:[2,114]},{64:[1,301]},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,302],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{20:[1,304],53:303,56:$Vc1},{20:[1,305]},{13:55,15:$Vj,16:$Vk,32:53,35:306,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{55:[1,307]},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,308],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{17:[1,309]},{43:[1,310],44:[1,311],45:[1,312]},{13:55,15:$Vj,16:$Vk,32:53,35:313,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},o($Vb1,[2,59]),{24:[1,314]},o($V91,[2,47],{50:[1,315]}),{20:[1,316]},o($V91,[2,49]),o($V91,[2,50]),{55:[1,317],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:318,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($V91,[2,37]),{18:[1,319]},{13:55,15:$Vj,16:$Vk,32:53,35:320,74:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:52,93:54,94:56,95:57,96:58,97:59,98:60,99:61,100:62,101:63,102:$V9,103:$Vt,104:$Vu,105:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA},{17:[2,40]},{17:[2,41]},{17:[1,321],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},o($Vb1,[2,62]),{18:[1,323],47:322,49:$V41},o($V91,[2,48]),{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:324,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[2,52],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:325,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},{17:[2,39],63:$VE,64:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR},{24:[1,326]},o($V91,[2,45]),{10:180,11:183,12:184,13:187,14:188,15:$VZ,19:327,28:179,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o([20,56],[2,51],{67:17,10:180,29:181,30:182,11:183,12:184,31:185,32:186,13:187,14:188,47:190,48:191,37:192,38:193,39:194,28:230,15:$VZ,33:$V_,34:$V$,36:$V01,40:$V11,41:$V21,46:$V31,49:$V41,51:$V51,62:$V3,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9}),{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,328],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($V91,[2,42]),{10:180,11:183,12:184,13:187,14:188,15:$VZ,20:[1,329],28:230,29:181,30:182,31:185,32:186,33:$V_,34:$V$,36:$V01,37:192,38:193,39:194,40:$V11,41:$V21,46:$V31,47:190,48:191,49:$V41,51:$V51,62:$V3,67:17,68:$V4,69:$V5,70:$V6,71:$V7,72:$V8,102:$V9},o($V91,[2,38]),o($V91,[2,46])],
defaultActions: {23:[2,1],111:[2,123],112:[2,124],113:[2,125],114:[2,126],270:[2,115],289:[2,114],311:[2,40],312:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./controller/Enum/TipoOperaciones');
	const TIPO_VALOR 		= require('./controller/Enum/TipoValores');
	const TIPO_DATO			= require('./controller/Enum/Tipados');
	const INSTRUCCION		= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Whitespace
break;
case 1:// EndOfLineComment
break;
case 2:// MultiLineComment
break;
case 3:return 'prclase'
break;
case 4:return 70
break;
case 5:return 69
break;
case 6:return 72
break;
case 7:return 71
break;
case 8:return 68
break;
case 9:return 62
break;
case 10:return 61
break;
case 11:return 66
break;
case 12:return 49
break;
case 13:return 50
break;
case 14:return 51
break;
case 15:return 54
break;
case 16:return 33
break;
case 17:return 40
break;
case 18:return 41
break;
case 19:return 46
break;
case 20:return 56
break;
case 21:return 36
break;
case 22:return 34
break;
case 23:return 22
break;
case 24:return 44
break;
case 25:return 45
break;
case 26:return 102
break;
case 27:return 103
break;
case 28:return 104
break;
case 29:return 105
break;
case 30:return 107
break;
case 31:return 108
break;
case 32:return 109
break;
case 33:return 110
break;
case 34:return 111
break;
case 35:return 23
break;
case 36:return 88
break;
case 37:return 89
break;
case 38:return 83
break;
case 39:return 84
break;
case 40:return 85
break;
case 41:return 43
break;
case 42:return 79
break;
case 43:return 80
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 64
break;
case 47:return 63
break;
case 48:return 26
break;
case 49:return 24
break;
case 50:return 65
break;
case 51:return 55
break;
case 52:return 18
break;
case 53:return 20
break;
case 54:return 75
break;
case 55:return 76
break;
case 56:return 74
break;
case 57:return 73
break;
case 58:return 77
break;
case 59:return 78
break;
case 60:return 16
break;
case 61:return 17
break;
case 62:return 58
break;
case 63:return 59
break;
case 64:return 60
break;
case 65:return 'especiales'
break;
case 66:return 15
break;
case 67:return 87 //probarlo
break;
case 68:return 86
break;
case 69:return 91
break;
case 70:return 90
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\\\/\\\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:clase\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:exec\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\\n|\\\\|\\"|\\“|\\”|\\t|\\')/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:['].?[']|[']especiales['])/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}